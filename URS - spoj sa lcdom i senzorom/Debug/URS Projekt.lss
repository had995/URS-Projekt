
URS Projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000004e6  0000057a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  00000586  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f4  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f2  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082b  00000000  00000000  000022a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000503  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bae  00000000  00000000  000031c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003d71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 08 02 	call	0x410	; 0x410 <main>
  8a:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:
	lcd_puts(adcStr);
}

void STEPPER_Init(){
	
	DDRB = 0x0F; /* Make PORTD lower pins as output */
  92:	c7 9a       	sbi	0x18, 7	; 24
  94:	00 c0       	rjmp	.+0      	; 0x96 <toggle_e+0x4>
  96:	c7 98       	cbi	0x18, 7	; 24
  98:	08 95       	ret

0000009a <lcd_write>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	d8 2f       	mov	r29, r24
  a0:	66 23       	and	r22, r22
  a2:	11 f0       	breq	.+4      	; 0xa8 <lcd_write+0xe>
  a4:	c5 9a       	sbi	0x18, 5	; 24
  a6:	01 c0       	rjmp	.+2      	; 0xaa <lcd_write+0x10>
  a8:	c5 98       	cbi	0x18, 5	; 24
  aa:	c6 98       	cbi	0x18, 6	; 24
  ac:	81 b3       	in	r24, 0x11	; 17
  ae:	8f 60       	ori	r24, 0x0F	; 15
  b0:	81 bb       	out	0x11, r24	; 17
  b2:	c2 b3       	in	r28, 0x12	; 18
  b4:	c0 7f       	andi	r28, 0xF0	; 240
  b6:	8d 2f       	mov	r24, r29
  b8:	82 95       	swap	r24
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	8c 2b       	or	r24, r28
  be:	82 bb       	out	0x12, r24	; 18
  c0:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  c4:	df 70       	andi	r29, 0x0F	; 15
  c6:	dc 2b       	or	r29, r28
  c8:	d2 bb       	out	0x12, r29	; 18
  ca:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  ce:	cf 60       	ori	r28, 0x0F	; 15
  d0:	c2 bb       	out	0x12, r28	; 18
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <lcd_read>:
  d8:	88 23       	and	r24, r24
  da:	11 f0       	breq	.+4      	; 0xe0 <lcd_read+0x8>
  dc:	c5 9a       	sbi	0x18, 5	; 24
  de:	01 c0       	rjmp	.+2      	; 0xe2 <lcd_read+0xa>
  e0:	c5 98       	cbi	0x18, 5	; 24
  e2:	c6 9a       	sbi	0x18, 6	; 24
  e4:	81 b3       	in	r24, 0x11	; 17
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	81 bb       	out	0x11, r24	; 17
  ea:	c7 9a       	sbi	0x18, 7	; 24
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_read+0x16>
  ee:	90 b3       	in	r25, 0x10	; 16
  f0:	c7 98       	cbi	0x18, 7	; 24
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_read+0x1c>
  f4:	c7 9a       	sbi	0x18, 7	; 24
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_read+0x20>
  f8:	20 b3       	in	r18, 0x10	; 16
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	89 2f       	mov	r24, r25
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	c7 98       	cbi	0x18, 7	; 24
 104:	82 2b       	or	r24, r18
 106:	08 95       	ret

00000108 <lcd_waitbusy>:
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_read>
 10e:	88 23       	and	r24, r24
 110:	dc f3       	brlt	.-10     	; 0x108 <lcd_waitbusy>
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_waitbusy+0xe>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_read>
 120:	08 95       	ret

00000122 <lcd_command>:
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
 126:	0e 94 84 00 	call	0x108	; 0x108 <lcd_waitbusy>
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	8c 2f       	mov	r24, r28
 12e:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <lcd_clrscr>:
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
 13c:	08 95       	ret

0000013e <lcd_putc>:
 13e:	cf 93       	push	r28
 140:	c8 2f       	mov	r28, r24
 142:	0e 94 84 00 	call	0x108	; 0x108 <lcd_waitbusy>
 146:	ca 30       	cpi	r28, 0x0A	; 10
 148:	49 f4       	brne	.+18     	; 0x15c <lcd_putc+0x1e>
 14a:	80 34       	cpi	r24, 0x40	; 64
 14c:	10 f0       	brcs	.+4      	; 0x152 <lcd_putc+0x14>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	01 c0       	rjmp	.+2      	; 0x154 <lcd_putc+0x16>
 152:	80 e4       	ldi	r24, 0x40	; 64
 154:	80 58       	subi	r24, 0x80	; 128
 156:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
 15a:	04 c0       	rjmp	.+8      	; 0x164 <lcd_putc+0x26>
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	8c 2f       	mov	r24, r28
 160:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_puts>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	29 f0       	breq	.+10     	; 0x182 <lcd_puts+0x1a>
 178:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_putc>
 17c:	89 91       	ld	r24, Y+
 17e:	81 11       	cpse	r24, r1
 180:	fb cf       	rjmp	.-10     	; 0x178 <lcd_puts+0x10>
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcd_init>:
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	18 2f       	mov	r17, r24
 190:	81 b3       	in	r24, 0x11	; 17
 192:	8f 60       	ori	r24, 0x0F	; 15
 194:	81 bb       	out	0x11, r24	; 17
 196:	bd 9a       	sbi	0x17, 5	; 23
 198:	be 9a       	sbi	0x17, 6	; 23
 19a:	bf 9a       	sbi	0x17, 7	; 23
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	93 e7       	ldi	r25, 0x73	; 115
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x18>
 1a4:	91 9a       	sbi	0x12, 1	; 18
 1a6:	90 9a       	sbi	0x12, 0	; 18
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
 1ac:	80 ef       	ldi	r24, 0xF0	; 240
 1ae:	93 e2       	ldi	r25, 0x23	; 35
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init+0x28>
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
 1b8:	c5 e7       	ldi	r28, 0x75	; 117
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
 1bc:	ce 01       	movw	r24, r28
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x36>
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
 1c6:	ce 01       	movw	r24, r28
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_init+0x40>
 1cc:	90 98       	cbi	0x12, 0	; 18
 1ce:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
 1d2:	21 97       	sbiw	r28, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init+0x4a>
 1d6:	88 e2       	ldi	r24, 0x28	; 40
 1d8:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
 1dc:	88 e0       	ldi	r24, 0x08	; 8
 1de:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
 1e2:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
 1ec:	81 2f       	mov	r24, r17
 1ee:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	08 95       	ret

000001fa <__vector_8>:
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 20c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 216:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <writeLCD>:
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	60 97       	sbiw	r28, 0x10	; 16
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	8c 01       	movw	r16, r24
 242:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
 246:	4a e0       	ldi	r20, 0x0A	; 10
 248:	be 01       	movw	r22, r28
 24a:	6f 5f       	subi	r22, 0xFF	; 255
 24c:	7f 4f       	sbci	r23, 0xFF	; 255
 24e:	c8 01       	movw	r24, r16
 250:	0e 94 3c 02 	call	0x478	; 0x478 <__itoa_ncheck>
 254:	8d e8       	ldi	r24, 0x8D	; 141
 256:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
 25a:	ce 01       	movw	r24, r28
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
 262:	60 96       	adiw	r28, 0x10	; 16
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	08 95       	ret

00000278 <rotate_clockwise>:
// 4 --> NULTI PIN      07  03  0B  09  0D  0C  0E   06 (CLOCKWISE SEQUENCE)


void rotate_clockwise(){
	
		PORTB = 0x07;  //0111
 278:	87 e0       	ldi	r24, 0x07	; 7
 27a:	88 bb       	out	0x18, r24	; 24
		PORTB = ~PORTB;
 27c:	88 b3       	in	r24, 0x18	; 24
 27e:	80 95       	com	r24
 280:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	93 e2       	ldi	r25, 0x23	; 35
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <rotate_clockwise+0xe>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <rotate_clockwise+0x14>
 28c:	00 00       	nop
		_delay_ms(time);
		PORTB = 0x03;  //0011
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	88 bb       	out	0x18, r24	; 24
		PORTB = ~PORTB;
 292:	88 b3       	in	r24, 0x18	; 24
 294:	80 95       	com	r24
 296:	88 bb       	out	0x18, r24	; 24
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	93 e2       	ldi	r25, 0x23	; 35
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <rotate_clockwise+0x24>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <rotate_clockwise+0x2a>
 2a2:	00 00       	nop
		_delay_ms(time);
		PORTB = 0x0B;  //1011
 2a4:	8b e0       	ldi	r24, 0x0B	; 11
 2a6:	88 bb       	out	0x18, r24	; 24
		PORTB = ~PORTB;
 2a8:	88 b3       	in	r24, 0x18	; 24
 2aa:	80 95       	com	r24
 2ac:	88 bb       	out	0x18, r24	; 24
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	93 e2       	ldi	r25, 0x23	; 35
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <rotate_clockwise+0x3a>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <rotate_clockwise+0x40>
 2b8:	00 00       	nop
		_delay_ms(time);
		PORTB = 0x09;
 2ba:	89 e0       	ldi	r24, 0x09	; 9
 2bc:	88 bb       	out	0x18, r24	; 24
		PORTB = ~PORTB;
 2be:	88 b3       	in	r24, 0x18	; 24
 2c0:	80 95       	com	r24
 2c2:	88 bb       	out	0x18, r24	; 24
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	93 e2       	ldi	r25, 0x23	; 35
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <rotate_clockwise+0x50>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <rotate_clockwise+0x56>
 2ce:	00 00       	nop
		_delay_ms(time);
		PORTB = 0x0D;
 2d0:	8d e0       	ldi	r24, 0x0D	; 13
 2d2:	88 bb       	out	0x18, r24	; 24
		PORTB = ~PORTB;
 2d4:	88 b3       	in	r24, 0x18	; 24
 2d6:	80 95       	com	r24
 2d8:	88 bb       	out	0x18, r24	; 24
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	93 e2       	ldi	r25, 0x23	; 35
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <rotate_clockwise+0x66>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <rotate_clockwise+0x6c>
 2e4:	00 00       	nop
		_delay_ms(time);
		PORTB = 0x0C;
 2e6:	8c e0       	ldi	r24, 0x0C	; 12
 2e8:	88 bb       	out	0x18, r24	; 24
		PORTB = ~PORTB;
 2ea:	88 b3       	in	r24, 0x18	; 24
 2ec:	80 95       	com	r24
 2ee:	88 bb       	out	0x18, r24	; 24
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	93 e2       	ldi	r25, 0x23	; 35
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <rotate_clockwise+0x7c>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <rotate_clockwise+0x82>
 2fa:	00 00       	nop
		_delay_ms(time);
		PORTB = 0x0E;
 2fc:	8e e0       	ldi	r24, 0x0E	; 14
 2fe:	88 bb       	out	0x18, r24	; 24
		PORTB = ~PORTB;
 300:	88 b3       	in	r24, 0x18	; 24
 302:	80 95       	com	r24
 304:	88 bb       	out	0x18, r24	; 24
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	93 e2       	ldi	r25, 0x23	; 35
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <rotate_clockwise+0x92>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <rotate_clockwise+0x98>
 310:	00 00       	nop
		_delay_ms(time);
		PORTB = 0x06;
 312:	86 e0       	ldi	r24, 0x06	; 6
 314:	88 bb       	out	0x18, r24	; 24
		PORTB = ~PORTB;
 316:	88 b3       	in	r24, 0x18	; 24
 318:	80 95       	com	r24
 31a:	88 bb       	out	0x18, r24	; 24
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	93 e2       	ldi	r25, 0x23	; 35
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <rotate_clockwise+0xa8>
 324:	00 c0       	rjmp	.+0      	; 0x326 <rotate_clockwise+0xae>
 326:	00 00       	nop
 328:	08 95       	ret

0000032a <rotate_anticlockwise>:
		
		
	}
void rotate_anticlockwise(){
	
	PORTB = 0x06;  
 32a:	86 e0       	ldi	r24, 0x06	; 6
 32c:	88 bb       	out	0x18, r24	; 24
	PORTB = ~PORTB;
 32e:	88 b3       	in	r24, 0x18	; 24
 330:	80 95       	com	r24
 332:	88 bb       	out	0x18, r24	; 24
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	93 e2       	ldi	r25, 0x23	; 35
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <rotate_anticlockwise+0xe>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <rotate_anticlockwise+0x14>
 33e:	00 00       	nop
	_delay_ms(time);
	PORTB = 0x0E; 
 340:	8e e0       	ldi	r24, 0x0E	; 14
 342:	88 bb       	out	0x18, r24	; 24
	PORTB = ~PORTB;
 344:	88 b3       	in	r24, 0x18	; 24
 346:	80 95       	com	r24
 348:	88 bb       	out	0x18, r24	; 24
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	93 e2       	ldi	r25, 0x23	; 35
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <rotate_anticlockwise+0x24>
 352:	00 c0       	rjmp	.+0      	; 0x354 <rotate_anticlockwise+0x2a>
 354:	00 00       	nop
	_delay_ms(time);
	PORTB = 0x0C;
 356:	8c e0       	ldi	r24, 0x0C	; 12
 358:	88 bb       	out	0x18, r24	; 24
	PORTB = ~PORTB;
 35a:	88 b3       	in	r24, 0x18	; 24
 35c:	80 95       	com	r24
 35e:	88 bb       	out	0x18, r24	; 24
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	93 e2       	ldi	r25, 0x23	; 35
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <rotate_anticlockwise+0x3a>
 368:	00 c0       	rjmp	.+0      	; 0x36a <rotate_anticlockwise+0x40>
 36a:	00 00       	nop
	_delay_ms(time);
	PORTB = 0x0D;
 36c:	8d e0       	ldi	r24, 0x0D	; 13
 36e:	88 bb       	out	0x18, r24	; 24
	PORTB = ~PORTB;
 370:	88 b3       	in	r24, 0x18	; 24
 372:	80 95       	com	r24
 374:	88 bb       	out	0x18, r24	; 24
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	93 e2       	ldi	r25, 0x23	; 35
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <rotate_anticlockwise+0x50>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <rotate_anticlockwise+0x56>
 380:	00 00       	nop
	_delay_ms(time);
	PORTB = 0x09;
 382:	89 e0       	ldi	r24, 0x09	; 9
 384:	88 bb       	out	0x18, r24	; 24
	PORTB = ~PORTB;
 386:	88 b3       	in	r24, 0x18	; 24
 388:	80 95       	com	r24
 38a:	88 bb       	out	0x18, r24	; 24
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	93 e2       	ldi	r25, 0x23	; 35
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <rotate_anticlockwise+0x66>
 394:	00 c0       	rjmp	.+0      	; 0x396 <rotate_anticlockwise+0x6c>
 396:	00 00       	nop
	_delay_ms(time);
	PORTB = 0x0B;
 398:	8b e0       	ldi	r24, 0x0B	; 11
 39a:	88 bb       	out	0x18, r24	; 24
	PORTB = ~PORTB;
 39c:	88 b3       	in	r24, 0x18	; 24
 39e:	80 95       	com	r24
 3a0:	88 bb       	out	0x18, r24	; 24
 3a2:	8f ef       	ldi	r24, 0xFF	; 255
 3a4:	93 e2       	ldi	r25, 0x23	; 35
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <rotate_anticlockwise+0x7c>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <rotate_anticlockwise+0x82>
 3ac:	00 00       	nop
	_delay_ms(time);
	PORTB = 0x03;
 3ae:	83 e0       	ldi	r24, 0x03	; 3
 3b0:	88 bb       	out	0x18, r24	; 24
	PORTB = ~PORTB;
 3b2:	88 b3       	in	r24, 0x18	; 24
 3b4:	80 95       	com	r24
 3b6:	88 bb       	out	0x18, r24	; 24
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	93 e2       	ldi	r25, 0x23	; 35
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <rotate_anticlockwise+0x92>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <rotate_anticlockwise+0x98>
 3c2:	00 00       	nop
	_delay_ms(time);
	PORTB = 0x07;
 3c4:	87 e0       	ldi	r24, 0x07	; 7
 3c6:	88 bb       	out	0x18, r24	; 24
	PORTB = ~PORTB;
 3c8:	88 b3       	in	r24, 0x18	; 24
 3ca:	80 95       	com	r24
 3cc:	88 bb       	out	0x18, r24	; 24
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	93 e2       	ldi	r25, 0x23	; 35
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <rotate_anticlockwise+0xa8>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <rotate_anticlockwise+0xae>
 3d8:	00 00       	nop
 3da:	08 95       	ret

000003dc <ADC_Init>:
	
}

void ADC_Init()
{
	DDRA = ~_BV(0);		/* Make ADC port as input */
 3dc:	8e ef       	ldi	r24, 0xFE	; 254
 3de:	8a bb       	out	0x1a, r24	; 26
	ADCSRA = 0x87;		/* Enable ADC, fr/128  */
 3e0:	87 e8       	ldi	r24, 0x87	; 135
 3e2:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;		/* Vref: Avcc, ADC channel: 0 */
 3e4:	80 e4       	ldi	r24, 0x40	; 64
 3e6:	87 b9       	out	0x07, r24	; 7
 3e8:	08 95       	ret

000003ea <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
 3ea:	97 b1       	in	r25, 0x07	; 7
 3ec:	8f 70       	andi	r24, 0x0F	; 15
 3ee:	98 2b       	or	r25, r24
 3f0:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
 3f2:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
 3f4:	34 9b       	sbis	0x06, 4	; 6
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <ADC_Read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f8:	88 e1       	ldi	r24, 0x18	; 24
 3fa:	8a 95       	dec	r24
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <ADC_Read+0x10>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
 400:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
 402:	85 b1       	in	r24, 0x05	; 5
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	98 2f       	mov	r25, r24
 408:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
 40a:	82 0f       	add	r24, r18
 40c:	91 1d       	adc	r25, r1
 40e:	08 95       	ret

00000410 <main>:
	lcd_puts(adcStr);
}

void STEPPER_Init(){
	
	DDRB = 0x0F; /* Make PORTD lower pins as output */
 410:	8f e0       	ldi	r24, 0x0F	; 15
 412:	87 bb       	out	0x17, r24	; 23
	
	
		
	STEPPER_Init();
	
	DDRA = 0x80;		/* Make trigger pin as output */
 414:	80 e8       	ldi	r24, 0x80	; 128
 416:	8a bb       	out	0x1a, r24	; 26
	PORTD = _BV(6);		/* Turn on Pull-up -- */
 418:	80 e4       	ldi	r24, 0x40	; 64
 41a:	82 bb       	out	0x12, r24	; 18
	
	DDRD = _BV(4);
 41c:	80 e1       	ldi	r24, 0x10	; 16
 41e:	81 bb       	out	0x11, r24	; 17
	
	
	
	TCCR1A = _BV(COM1B1) | _BV(WGM10);
 420:	81 e2       	ldi	r24, 0x21	; 33
 422:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12) | _BV(CS11);
 424:	8a e0       	ldi	r24, 0x0A	; 10
 426:	8e bd       	out	0x2e, r24	; 46
	OCR1B = 18;
 428:	82 e1       	ldi	r24, 0x12	; 18
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	99 bd       	out	0x29, r25	; 41
 42e:	88 bd       	out	0x28, r24	; 40

	ADC_Init();
 430:	0e 94 ee 01 	call	0x3dc	; 0x3dc <ADC_Init>
	
	lcd_init(LCD_DISP_ON);
 434:	8c e0       	ldi	r24, 0x0C	; 12
 436:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_init>
	lcd_clrscr();
 43a:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 43e:	80 e8       	ldi	r24, 0x80	; 128
 440:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
	lcd_gotoxy(0, 0);
	lcd_puts("Ultrasonic");
 444:	80 e6       	ldi	r24, 0x60	; 96
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
	
	sei();			/* Enable global interrupt */
 44c:	78 94       	sei
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
 44e:	84 e0       	ldi	r24, 0x04	; 4
 450:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
 452:	1f bc       	out	0x2f, r1	; 47
		//lcd_puts("Dist = ");
		//lcd_gotoxy(7, 1);
		//lcd_puts(string);	/* Print distance */
		//_delay_ms(200);
		
		value = ADC_Read(0);    /* Read ADC channel 0 */
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 f5 01 	call	0x3ea	; 0x3ea <ADC_Read>
 45a:	ec 01       	movw	r28, r24
		
		writeLCD(value);        // Ispis vrijednosti
 45c:	0e 94 14 01 	call	0x228	; 0x228 <writeLCD>
		
		if(value < 652){
 460:	cc 38       	cpi	r28, 0x8C	; 140
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	d8 07       	cpc	r29, r24
 466:	14 f4       	brge	.+4      	; 0x46c <__stack+0xd>
			
			rotate_clockwise();
 468:	0e 94 3c 01 	call	0x278	; 0x278 <rotate_clockwise>
		}
		if(value > 770){
 46c:	c3 30       	cpi	r28, 0x03	; 3
 46e:	d3 40       	sbci	r29, 0x03	; 3
 470:	8c f3       	brlt	.-30     	; 0x454 <main+0x44>
			
			rotate_anticlockwise();
 472:	0e 94 95 01 	call	0x32a	; 0x32a <rotate_anticlockwise>
 476:	ee cf       	rjmp	.-36     	; 0x454 <main+0x44>

00000478 <__itoa_ncheck>:
 478:	bb 27       	eor	r27, r27
 47a:	4a 30       	cpi	r20, 0x0A	; 10
 47c:	31 f4       	brne	.+12     	; 0x48a <__itoa_ncheck+0x12>
 47e:	99 23       	and	r25, r25
 480:	22 f4       	brpl	.+8      	; 0x48a <__itoa_ncheck+0x12>
 482:	bd e2       	ldi	r27, 0x2D	; 45
 484:	90 95       	com	r25
 486:	81 95       	neg	r24
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	0c 94 48 02 	jmp	0x490	; 0x490 <__utoa_common>

0000048e <__utoa_ncheck>:
 48e:	bb 27       	eor	r27, r27

00000490 <__utoa_common>:
 490:	fb 01       	movw	r30, r22
 492:	55 27       	eor	r21, r21
 494:	aa 27       	eor	r26, r26
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	aa 1f       	adc	r26, r26
 49c:	a4 17       	cp	r26, r20
 49e:	10 f0       	brcs	.+4      	; 0x4a4 <__utoa_common+0x14>
 4a0:	a4 1b       	sub	r26, r20
 4a2:	83 95       	inc	r24
 4a4:	50 51       	subi	r21, 0x10	; 16
 4a6:	b9 f7       	brne	.-18     	; 0x496 <__utoa_common+0x6>
 4a8:	a0 5d       	subi	r26, 0xD0	; 208
 4aa:	aa 33       	cpi	r26, 0x3A	; 58
 4ac:	08 f0       	brcs	.+2      	; 0x4b0 <__utoa_common+0x20>
 4ae:	a9 5d       	subi	r26, 0xD9	; 217
 4b0:	a1 93       	st	Z+, r26
 4b2:	00 97       	sbiw	r24, 0x00	; 0
 4b4:	79 f7       	brne	.-34     	; 0x494 <__utoa_common+0x4>
 4b6:	b1 11       	cpse	r27, r1
 4b8:	b1 93       	st	Z+, r27
 4ba:	11 92       	st	Z+, r1
 4bc:	cb 01       	movw	r24, r22
 4be:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <strrev>

000004c2 <strrev>:
 4c2:	dc 01       	movw	r26, r24
 4c4:	fc 01       	movw	r30, r24
 4c6:	67 2f       	mov	r22, r23
 4c8:	71 91       	ld	r23, Z+
 4ca:	77 23       	and	r23, r23
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <strrev+0x4>
 4ce:	32 97       	sbiw	r30, 0x02	; 2
 4d0:	04 c0       	rjmp	.+8      	; 0x4da <strrev+0x18>
 4d2:	7c 91       	ld	r23, X
 4d4:	6d 93       	st	X+, r22
 4d6:	70 83       	st	Z, r23
 4d8:	62 91       	ld	r22, -Z
 4da:	ae 17       	cp	r26, r30
 4dc:	bf 07       	cpc	r27, r31
 4de:	c8 f3       	brcs	.-14     	; 0x4d2 <strrev+0x10>
 4e0:	08 95       	ret

000004e2 <_exit>:
 4e2:	f8 94       	cli

000004e4 <__stop_program>:
 4e4:	ff cf       	rjmp	.-2      	; 0x4e4 <__stop_program>
