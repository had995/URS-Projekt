
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000003da  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012cd  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e4  00000000  00000000  0000184d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007e5  00000000  00000000  00002131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d4  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b65  00000000  00000000  00002fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003b1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 96 01 	call	0x32c	; 0x32c <main>
  7a:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	97 9a       	sbi	0x12, 7	; 18
  84:	00 c0       	rjmp	.+0      	; 0x86 <toggle_e+0x4>
  86:	97 98       	cbi	0x12, 7	; 18
  88:	08 95       	ret

0000008a <lcd_write>:
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	d8 2f       	mov	r29, r24
  90:	66 23       	and	r22, r22
  92:	11 f0       	breq	.+4      	; 0x98 <lcd_write+0xe>
  94:	95 9a       	sbi	0x12, 5	; 18
  96:	01 c0       	rjmp	.+2      	; 0x9a <lcd_write+0x10>
  98:	95 98       	cbi	0x12, 5	; 18
  9a:	96 98       	cbi	0x12, 6	; 18
  9c:	81 b3       	in	r24, 0x11	; 17
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	81 bb       	out	0x11, r24	; 17
  a2:	c2 b3       	in	r28, 0x12	; 18
  a4:	c0 7f       	andi	r28, 0xF0	; 240
  a6:	8d 2f       	mov	r24, r29
  a8:	82 95       	swap	r24
  aa:	8f 70       	andi	r24, 0x0F	; 15
  ac:	8c 2b       	or	r24, r28
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  b4:	df 70       	andi	r29, 0x0F	; 15
  b6:	dc 2b       	or	r29, r28
  b8:	d2 bb       	out	0x12, r29	; 18
  ba:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  be:	cf 60       	ori	r28, 0x0F	; 15
  c0:	c2 bb       	out	0x12, r28	; 18
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <lcd_read>:
  c8:	88 23       	and	r24, r24
  ca:	11 f0       	breq	.+4      	; 0xd0 <lcd_read+0x8>
  cc:	95 9a       	sbi	0x12, 5	; 18
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <lcd_read+0xa>
  d0:	95 98       	cbi	0x12, 5	; 18
  d2:	96 9a       	sbi	0x12, 6	; 18
  d4:	81 b3       	in	r24, 0x11	; 17
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	81 bb       	out	0x11, r24	; 17
  da:	97 9a       	sbi	0x12, 7	; 18
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_read+0x16>
  de:	90 b3       	in	r25, 0x10	; 16
  e0:	97 98       	cbi	0x12, 7	; 18
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_read+0x1c>
  e4:	97 9a       	sbi	0x12, 7	; 18
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_read+0x20>
  e8:	20 b3       	in	r18, 0x10	; 16
  ea:	2f 70       	andi	r18, 0x0F	; 15
  ec:	89 2f       	mov	r24, r25
  ee:	82 95       	swap	r24
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	97 98       	cbi	0x12, 7	; 18
  f4:	82 2b       	or	r24, r18
  f6:	08 95       	ret

000000f8 <lcd_waitbusy>:
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_read>
  fe:	88 23       	and	r24, r24
 100:	dc f3       	brlt	.-10     	; 0xf8 <lcd_waitbusy>
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_waitbusy+0xe>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_read>
 110:	08 95       	ret

00000112 <lcd_command>:
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
 116:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_waitbusy>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	8c 2f       	mov	r24, r28
 11e:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <lcd_clrscr>:
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 12c:	08 95       	ret

0000012e <lcd_putc>:
 12e:	cf 93       	push	r28
 130:	c8 2f       	mov	r28, r24
 132:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_waitbusy>
 136:	ca 30       	cpi	r28, 0x0A	; 10
 138:	49 f4       	brne	.+18     	; 0x14c <lcd_putc+0x1e>
 13a:	80 34       	cpi	r24, 0x40	; 64
 13c:	10 f0       	brcs	.+4      	; 0x142 <lcd_putc+0x14>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	01 c0       	rjmp	.+2      	; 0x144 <lcd_putc+0x16>
 142:	80 e4       	ldi	r24, 0x40	; 64
 144:	80 58       	subi	r24, 0x80	; 128
 146:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 14a:	04 c0       	rjmp	.+8      	; 0x154 <lcd_putc+0x26>
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	8c 2f       	mov	r24, r28
 150:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <lcd_puts>:
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	fc 01       	movw	r30, r24
 162:	80 81       	ld	r24, Z
 164:	88 23       	and	r24, r24
 166:	29 f0       	breq	.+10     	; 0x172 <lcd_puts+0x1a>
 168:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_putc>
 16c:	89 91       	ld	r24, Y+
 16e:	81 11       	cpse	r24, r1
 170:	fb cf       	rjmp	.-10     	; 0x168 <lcd_puts+0x10>
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <lcd_init>:
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	18 2f       	mov	r17, r24
 180:	81 b3       	in	r24, 0x11	; 17
 182:	8f 60       	ori	r24, 0x0F	; 15
 184:	81 bb       	out	0x11, r24	; 17
 186:	8d 9a       	sbi	0x11, 5	; 17
 188:	8e 9a       	sbi	0x11, 6	; 17
 18a:	8f 9a       	sbi	0x11, 7	; 17
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	93 e7       	ldi	r25, 0x73	; 115
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_init+0x18>
 194:	91 9a       	sbi	0x12, 1	; 18
 196:	90 9a       	sbi	0x12, 0	; 18
 198:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 19c:	80 ef       	ldi	r24, 0xF0	; 240
 19e:	93 e2       	ldi	r25, 0x23	; 35
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x28>
 1a4:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 1a8:	c5 e7       	ldi	r28, 0x75	; 117
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
 1ac:	ce 01       	movw	r24, r28
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x36>
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 1b6:	ce 01       	movw	r24, r28
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_init+0x40>
 1bc:	90 98       	cbi	0x12, 0	; 18
 1be:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 1c2:	21 97       	sbiw	r28, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init+0x4a>
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 1cc:	88 e0       	ldi	r24, 0x08	; 8
 1ce:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 1d2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_clrscr>
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 1dc:	81 2f       	mov	r24, r17
 1de:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	08 95       	ret

000001ea <writeLCD>:
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	60 97       	sbiw	r28, 0x10	; 16
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	8c 01       	movw	r16, r24
 204:	0e 94 93 00 	call	0x126	; 0x126 <lcd_clrscr>
 208:	4a e0       	ldi	r20, 0x0A	; 10
 20a:	be 01       	movw	r22, r28
 20c:	6f 5f       	subi	r22, 0xFF	; 255
 20e:	7f 4f       	sbci	r23, 0xFF	; 255
 210:	c8 01       	movw	r24, r16
 212:	0e 94 b6 01 	call	0x36c	; 0x36c <__itoa_ncheck>
 216:	80 e8       	ldi	r24, 0x80	; 128
 218:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 21c:	80 e6       	ldi	r24, 0x60	; 96
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_puts>
 224:	86 e8       	ldi	r24, 0x86	; 134
 226:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 22a:	ce 01       	movw	r24, r28
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_puts>
 232:	60 96       	adiw	r28, 0x10	; 16
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	08 95       	ret

00000248 <rotate_clockwise>:
 248:	87 e0       	ldi	r24, 0x07	; 7
 24a:	88 bb       	out	0x18, r24	; 24
 24c:	88 b3       	in	r24, 0x18	; 24
 24e:	80 95       	com	r24
 250:	88 bb       	out	0x18, r24	; 24
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	93 e2       	ldi	r25, 0x23	; 35
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <rotate_clockwise+0xe>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <rotate_clockwise+0x14>
 25c:	00 00       	nop
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	88 bb       	out	0x18, r24	; 24
 262:	88 b3       	in	r24, 0x18	; 24
 264:	80 95       	com	r24
 266:	88 bb       	out	0x18, r24	; 24
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	93 e2       	ldi	r25, 0x23	; 35
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <rotate_clockwise+0x24>
 270:	00 c0       	rjmp	.+0      	; 0x272 <rotate_clockwise+0x2a>
 272:	00 00       	nop
 274:	8b e0       	ldi	r24, 0x0B	; 11
 276:	88 bb       	out	0x18, r24	; 24
 278:	88 b3       	in	r24, 0x18	; 24
 27a:	80 95       	com	r24
 27c:	88 bb       	out	0x18, r24	; 24
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	93 e2       	ldi	r25, 0x23	; 35
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <rotate_clockwise+0x3a>
 286:	00 c0       	rjmp	.+0      	; 0x288 <rotate_clockwise+0x40>
 288:	00 00       	nop
 28a:	89 e0       	ldi	r24, 0x09	; 9
 28c:	88 bb       	out	0x18, r24	; 24
 28e:	88 b3       	in	r24, 0x18	; 24
 290:	80 95       	com	r24
 292:	88 bb       	out	0x18, r24	; 24
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	93 e2       	ldi	r25, 0x23	; 35
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <rotate_clockwise+0x50>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <rotate_clockwise+0x56>
 29e:	00 00       	nop
 2a0:	8d e0       	ldi	r24, 0x0D	; 13
 2a2:	88 bb       	out	0x18, r24	; 24
 2a4:	88 b3       	in	r24, 0x18	; 24
 2a6:	80 95       	com	r24
 2a8:	88 bb       	out	0x18, r24	; 24
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	93 e2       	ldi	r25, 0x23	; 35
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <rotate_clockwise+0x66>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <rotate_clockwise+0x6c>
 2b4:	00 00       	nop
 2b6:	8c e0       	ldi	r24, 0x0C	; 12
 2b8:	88 bb       	out	0x18, r24	; 24
 2ba:	88 b3       	in	r24, 0x18	; 24
 2bc:	80 95       	com	r24
 2be:	88 bb       	out	0x18, r24	; 24
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	93 e2       	ldi	r25, 0x23	; 35
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <rotate_clockwise+0x7c>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <rotate_clockwise+0x82>
 2ca:	00 00       	nop
 2cc:	8e e0       	ldi	r24, 0x0E	; 14
 2ce:	88 bb       	out	0x18, r24	; 24
 2d0:	88 b3       	in	r24, 0x18	; 24
 2d2:	80 95       	com	r24
 2d4:	88 bb       	out	0x18, r24	; 24
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	93 e2       	ldi	r25, 0x23	; 35
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <rotate_clockwise+0x92>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <rotate_clockwise+0x98>
 2e0:	00 00       	nop
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	88 bb       	out	0x18, r24	; 24
 2e6:	88 b3       	in	r24, 0x18	; 24
 2e8:	80 95       	com	r24
 2ea:	88 bb       	out	0x18, r24	; 24
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	93 e2       	ldi	r25, 0x23	; 35
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <rotate_clockwise+0xa8>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <rotate_clockwise+0xae>
 2f6:	00 00       	nop
 2f8:	08 95       	ret

000002fa <ADC_Init>:
	
}

void ADC_Init()
{
	DDRA=0x00;			/* Make ADC port as input */
 2fa:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;		/* Enable ADC, fr/128  */
 2fc:	87 e8       	ldi	r24, 0x87	; 135
 2fe:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;		/* Vref: Avcc, ADC channel: 0 */
 300:	80 e4       	ldi	r24, 0x40	; 64
 302:	87 b9       	out	0x07, r24	; 7
 304:	08 95       	ret

00000306 <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
 306:	97 b1       	in	r25, 0x07	; 7
 308:	8f 70       	andi	r24, 0x0F	; 15
 30a:	98 2b       	or	r25, r24
 30c:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
 30e:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
 310:	34 9b       	sbis	0x06, 4	; 6
 312:	fe cf       	rjmp	.-4      	; 0x310 <ADC_Read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 314:	88 e1       	ldi	r24, 0x18	; 24
 316:	8a 95       	dec	r24
 318:	f1 f7       	brne	.-4      	; 0x316 <ADC_Read+0x10>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <ADC_Read+0x16>
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
 31c:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
 31e:	85 b1       	in	r24, 0x05	; 5
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	98 2f       	mov	r25, r24
 324:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
 326:	82 0f       	add	r24, r18
 328:	91 1d       	adc	r25, r1
 32a:	08 95       	ret

0000032c <main>:

int main(void)
{
	DDRD = _BV(4);
 32c:	80 e1       	ldi	r24, 0x10	; 16
 32e:	81 bb       	out	0x11, r24	; 17

	TCCR1A = _BV(COM1B1) | _BV(WGM10);
 330:	81 e2       	ldi	r24, 0x21	; 33
 332:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12) | _BV(CS11);
 334:	8a e0       	ldi	r24, 0x0A	; 10
 336:	8e bd       	out	0x2e, r24	; 46
	OCR1B = 14;
 338:	8e e0       	ldi	r24, 0x0E	; 14
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	99 bd       	out	0x29, r25	; 41
 33e:	88 bd       	out	0x28, r24	; 40

	lcd_init(LCD_DISP_ON);
 340:	8c e0       	ldi	r24, 0x0C	; 12
 342:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_init>
	
	
	int value, value1;
	
	ADC_Init();
 346:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ADC_Init>
	lcd_puts(adcStr);
}

void STEPPER_Init(){
	
	DDRB = 0x0F; /* Make PORTD lower pins as output */
 34a:	8f e0       	ldi	r24, 0x0F	; 15
 34c:	87 bb       	out	0x17, r24	; 23
	
	STEPPER_Init();

	while (1) {
		
		value = ADC_Read(0);    /* Read ADC channel 0 */
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 83 01 	call	0x306	; 0x306 <ADC_Read>
 354:	ec 01       	movw	r28, r24
		
		writeLCD(value);        // Ispis vrijednosti 
 356:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writeLCD>
		
		if(value){
 35a:	cd 2b       	or	r28, r29
 35c:	11 f0       	breq	.+4      	; 0x362 <main+0x36>
			
			rotate_clockwise();
 35e:	0e 94 24 01 	call	0x248	; 0x248 <rotate_clockwise>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 362:	83 e3       	ldi	r24, 0x33	; 51
 364:	97 e0       	ldi	r25, 0x07	; 7
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <main+0x3a>
 36a:	f1 cf       	rjmp	.-30     	; 0x34e <main+0x22>

0000036c <__itoa_ncheck>:
 36c:	bb 27       	eor	r27, r27
 36e:	4a 30       	cpi	r20, 0x0A	; 10
 370:	31 f4       	brne	.+12     	; 0x37e <__itoa_ncheck+0x12>
 372:	99 23       	and	r25, r25
 374:	22 f4       	brpl	.+8      	; 0x37e <__itoa_ncheck+0x12>
 376:	bd e2       	ldi	r27, 0x2D	; 45
 378:	90 95       	com	r25
 37a:	81 95       	neg	r24
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	0c 94 c2 01 	jmp	0x384	; 0x384 <__utoa_common>

00000382 <__utoa_ncheck>:
 382:	bb 27       	eor	r27, r27

00000384 <__utoa_common>:
 384:	fb 01       	movw	r30, r22
 386:	55 27       	eor	r21, r21
 388:	aa 27       	eor	r26, r26
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	aa 1f       	adc	r26, r26
 390:	a4 17       	cp	r26, r20
 392:	10 f0       	brcs	.+4      	; 0x398 <__utoa_common+0x14>
 394:	a4 1b       	sub	r26, r20
 396:	83 95       	inc	r24
 398:	50 51       	subi	r21, 0x10	; 16
 39a:	b9 f7       	brne	.-18     	; 0x38a <__utoa_common+0x6>
 39c:	a0 5d       	subi	r26, 0xD0	; 208
 39e:	aa 33       	cpi	r26, 0x3A	; 58
 3a0:	08 f0       	brcs	.+2      	; 0x3a4 <__utoa_common+0x20>
 3a2:	a9 5d       	subi	r26, 0xD9	; 217
 3a4:	a1 93       	st	Z+, r26
 3a6:	00 97       	sbiw	r24, 0x00	; 0
 3a8:	79 f7       	brne	.-34     	; 0x388 <__utoa_common+0x4>
 3aa:	b1 11       	cpse	r27, r1
 3ac:	b1 93       	st	Z+, r27
 3ae:	11 92       	st	Z+, r1
 3b0:	cb 01       	movw	r24, r22
 3b2:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <strrev>

000003b6 <strrev>:
 3b6:	dc 01       	movw	r26, r24
 3b8:	fc 01       	movw	r30, r24
 3ba:	67 2f       	mov	r22, r23
 3bc:	71 91       	ld	r23, Z+
 3be:	77 23       	and	r23, r23
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <strrev+0x4>
 3c2:	32 97       	sbiw	r30, 0x02	; 2
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <strrev+0x18>
 3c6:	7c 91       	ld	r23, X
 3c8:	6d 93       	st	X+, r22
 3ca:	70 83       	st	Z, r23
 3cc:	62 91       	ld	r22, -Z
 3ce:	ae 17       	cp	r26, r30
 3d0:	bf 07       	cpc	r27, r31
 3d2:	c8 f3       	brcs	.-14     	; 0x3c6 <strrev+0x10>
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
